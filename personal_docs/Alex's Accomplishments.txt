Alex Worden's Career Accomplishments and Experience In Detail

Division Inc. - Virtual Reality Software Engineer

Prior to starting his professional Career, Alex had been an avid programmer. Alex started programming at age 8 in 1980 on personal computers, learning Basic, Pascal, and 6502 assembly language. Alex created a software company at age 14 and built and sold several software applications including commercial graphics rendering for advertising, computer games, and an economics simulation for educational use. Alex studdied Computer Science with a concentration in Artificial Intelligence at Leeds University, UK and obtained a 1st class degree with honours. 

Alex started his career in the UK as a Software Engineer at a Virtual Reality startup called Division, which built the world's first commercial fully immersive VR system. Alex worked on a small team of 4 engineers. Alex developed an interactive world-simulation engine that allowed the user to create and interact with a virtual world. This was in essence a game-engine with user-programmable interactions and events that could be applied to objects in the virtual world. Some equivalent software systems today are Minecraft and Roblox. Alex built an animation engine that was based upon time as opposed to key-frames to allow for real-time rendering of the virtual environment on various hardware platforms with different levels of performance. Alex was solely responsible for the design and development of an immersive user interface developer library and a set of immersive world-authoring tools that allowed the user to edit the virtual environment while they are in the virtual environment in real-time. Alex built immersive UI components using the C programming language but he implemented an object oriented paradigm using C structs and function pointers. The object oriented UI component library of widgets and layout managers allowed for widgets to be combined and extended. The UI layouts used a hierarchical structure similar to other UI libraries, but in 3D and allowed for multiple users to interact with them simultaneously. Callbacks could be added to the widgets to invoke external functionality in the simulation engine or with external systems. 

Alex moved to the USA in San Francisco Bay Area with Division and took a new role as a customer facing engineer building customer integrations for companies including NASA, Applied Materials, General Motors, GE, Bechtel, Boeing, McDonnel Douglas, Dana, and Harley Davidson. Alex built an astronaught training simulation for NASA to train EVA operations on the space shuttle. Alex built a tool to enable the rapid disassembly and reassembly of a virtual mechanical engine assembly which was used by Harley Davidson to train their production mechanics on prototype engine designs. Alex built a simulation of a microchip wafer fabrication machine to allow Applied Materials to identify microscopic contamination of particles from parts that affected the quality of their microchips. Alex integrated Java to the C based VR software to allow a customer's systems to integrate from any platform with a JVM. This was one of the first version of Java 1.1 which was a new technology at the time. 

WebLogic
========
Alex joined a startup in San Francisco called WebLogic which built one of the first Java web servers. He was initially responsible for writing API documentation and building tutorials and developer examples which helpped with the rapid customer adoption of the webserver, beating the competition. Within six months, Alex joined the Servlet Engine team as a customer centric engineer as part of the new customer centric engineering team. Alex became the team lead for the customer-centric-engineering team with ~12 other developers building custom extensions and new product capabilities for customers. Alex spent multiple years helping 100’s of customers scale their systems and making improvements to the WebLogic Server. 

Wells Fargo
===========
Alex joined a small team at Wells Fargo to completely re-implement their online banking system in WebLogic. Alex started working at Wells Fargo as a contractor and later joined as a full time employee for a total of 6 years. The Wells Fargo webapp backend interfaced with multiple backend secure banking system services, which gave Alex an early exposure to SOA / DDD system design before it was a recognised industry practice. Alex optimized the user sign-on experience from 12+ seconds to under 2 seconds by refactoring multiple backend service calls to execute in parallel. 
At Wells Fargo, Alex designed and developed a splash-page marketing framework configurable at runtime to deliver personalized offers to customers that generated $20 million in loan leads in the first 60 days of release. 
Alex developed the first Wells Fargo mobile app, as an embedded customized web-view. 
Alex designed and developed a framework to financially optimize sending SMS messages to customers. 

Verizon Wireless
================
Alex worked at Verizon Wireless as a Senior Engineer where I developed a Business Process Management (BPM) system to allow Verison to coordinate the installation of 5G wireless antenna's across the USA. I developed a no-code/low-code user interface framework to allow web forms to be defined and data collected. The forms could also be converted to interactive PDFs and printed. The framework was object-oriented using a hierarchy of widgets and layout containers that could be interpreted so the desired format of a web-form or a PDF-form. I also optimized the Database queries to be 10x faster by looking at SQL query plans. I also refactored and improved the software architecture to be more maintainable by breaking it up into domain-oriented modules. 

Google
======
Alex worked at Google in San Francisco on the "Vault" team which built "leagal discovery" capabilities into the "Google Apps For Work" product suite and allowed searching and compiling archives across all documents and email owned by an enterprise. Vault was used to compile definitive archives for legal disputes. Alex refactored and improved the system design that used Google Web Toolkit (GWT) to provision the web interface. Alex developed a system integration design and project plan to incorporate a legacy email system into the Vault search. The challenge was to search across combined and overlapping emails from two disperate sources of corporate email contexts. Alex designed a solution to allow the interleaving of search results from multiple pagenation cursors that each referenced large data sources. 

General Electric
================
Alex worked at General Electric (GE) in their Software Center of Excellence in San Ramon. Alex accomplished the following: 
* Alex was one of the first engineers hired and defined the hiring and interview process to build the engineering organization from 20 to over 800 high caliber engineers in 9 months. 
* Alex was promoted to Principal Architect overseeing 20+ projects building IoT Big Data Asset Performance Monitoring (APM) projects across GE's buisiness verticals, including Oil and Gas, Power and Water, Digital Energy, Healthcare, and Aviation. 
* Alex collaborated with executives from each of GE's verticals to determine how Machine Learning and IoT could be utilized to improve their business operations. The term "Industrial Internet" was coined at GE to refer to the many projects that Alex worked on. 
* Alex oversaw the architectural design and implementation of 10+ projects. Alex led multiple "tiger teams" to develop proof-of-concept projects including: 
   * Alex conceived of and led the design and implementation of a "Service Broker" framework similar to Cloud Foundry to allow teams to host and share their multi-tenant SaaS analytic and data services with other teams at GE. 
   * Alex developed a cloud-native system on AWS to manage and coordinate a network of electric vehicle (EV) charging stations. It allowed GE's EV chargers to share their location and availability, then allow drivers to see which charging stations were abailable, reserve them, monitor and control them and plan their route. I collaborated with the firmware engineers and introduced the use of Google Protobuf to define the protocol between the firmware and the software systems. We build mobile apps and webapps to provide access for multiple categories of end-users including drivers, administrators, charger owners, and maintenance engineers. 
   * Alex developed a configuration and monitoring system to model deep-sea blowout preventors (BOP). His design utilized XML to model the configuration of the BOPs so that existing XML editors could be used - a scrappy but effective strategy that enabled the project to be built very rapidly. Once the BOP configuration was defined, the software system could keep track on key metrics and facilitate tracking which components were used and which needed to be replaced or maintained. This increased safety and reduced the deployment time for a maintenance ship from days to hours. These ships cost $500K per day so the savings per year across a fleet of ships were very significant. 
   * Alex designed and developed a software system to track the maintenance and use of GE Aviation's jet engines over their lifetime. It gathered usage data from each engine and predicted the lifespan of limited-life parts in each engine, which can  over 7000 parts and can cost over $1 million to service off the wing. The system ran Montecarlo simulations to determine the service intervals needed for each engine and which parts were likely to fail. This allowed GE to determine where to in vest R&D in order to increase the lifespan of the parts and reduce the maintenance costs. The system also tracked which airframes the engines were used on across their service life, and which routes those planes flew, which has a significan effect on the engine service intervals necessary. 

Intelligen Financial
====================
Alex founded the company "Intelligent Financial" with an executive Director from GE called Jim Schmid. They built a SaaS product that allows financial advisors to win clients by creating custom financial portfolio proposals. The system allowed the financial advisor to enter the client's existing financial portfolio, their risk tollerance, and their financial goals. The system uses Montecarlo simulations against a large pre-processed database of historical financial data to determine which financial instruments could allow the client to achieve or exceed their financial goals with less or similar risk. The system then generates a white-labelled custom portfolio proposal that is tailored to the client's risk tollerance and financial goals in a fraction of the time. This reduces the proposal generation time from multiple days to udner 30 minutes, allowing financial advisors to manage and win many more clients for their business. 
* Alex designed and implemented the system architecture and software systems on AWS using Spring Boot, Java, and Postgre DB. 
* Alex built a client prospecting system that allowed financial advisors to share a custom link with prospective clients, inviting them to enter their financial portfolio and goals. The system allowed the financial advisor to track the progress of the prospect and follow up with them. 
* Alex build a user license management system that allowed financial institutions to purchase and manage user licenses and make them available to their financial advisors. It was incorporated with Stripe payments to allow for credit card payments and recurring billing. 
* Alex build a system to manage organizational configurations, white-labeled branding, user entitlements, and financial instrument data. The system allowed financial umbrella institutions to define limits and provide legal disclaimers for their financial advisors. 


Bigfoot Biomedical
==================
Alex joined Bigfoot Biomedical as Director of Engineering and was promoted to Senior Director of Engineering after 3 years. Alex was asked by a Senior Director called Alan Schachtely from GE to join "Bigfoot Biomedical", in order to establish the engineering organization at Bigfoot Biomedical. 
   * Alex built the engineering team up over 4 years to a total of 5 teams and over 40 people. Some of the best engineers from GE followed Alex to Bigfoot Biomedical. 
   * At Bigfoot Biomedical, Alex's teams built two commercial products for type-1 and type-2 diabetes. The products were classified as class-3 and class-2 medical devices. They started from a clean slate, and we were able to rapidly design a cloud-native system on Amazon Web Services (AWS) that included a React Native mobile app on iOS and Android that communicated with firmware on the hardware device using Google Protobuf. The mobile app connected the local system to Bigfoot's cloud services, which allowed family members and/or physicians to monitor the health of the person with diabetes on both a webapp (built using React / Typescript) and a version of the React mobile app that was tailored for monitoring. The cloud services were built to be multi-tenant from the start and used Java, Spring Boot, Postgre DB, AWS Dynamo DB, Kenisis, and Kafka. Alex's teams used a domain-driven-design (DDD) from the outset, which allowed them to rapidly build and scale the system without the overhead and scalability issues of a typical startup monolith.  
   * Alex built the system to be compliant with IEC62304 standards. Alex collaborated with his team and the business stakeholders to develop a light-weight agile working methodology that delivered everything necessary to meet FDA standards but also allowed the team move fast and innovate. 
   * Alex has continued to evolve these working practices over the rest of his career, where he has shown a track-record for transforming engineering teams and cultures to have predictable high performance and empower engineers to grow and deliver their best work. 
   * Alex collaborated with engineering, product management, quality management, and the business stakeholders to select an ALM tool called "codeBeamer" to manage the development of the product and generate the requirements traceability documents necessary to meet FDA compliance. Alex owned the company-wide configuration of codeBeamer. The configuration allowed the definition of "user needs" and "business goals", tracing to specific "product requirements". It supported "hazard analysis" and definition of mitigation requirements. The engineering team worked from high-level system designs that traced to product requirements and implementation stories that built and traced to high-level system designs. 
   * Alex developed an efficient system based upon an extension of Junit that could document our verification tests and auto-generate verification test reports that traced to requirements in order to meet FDA and IEC62304 standards. 
   * Alex mentored and grew two lead engineers into engineering managers, who ran two of his teams. 
   * Alex led a strategy to build multi-tenant systems based on his learnings from GE, which allowed the teams to share the use of hosted services during development and testing. This greatly simplified and accellerated development and testing of our distributed systems. 
   * Alex drove the strategy and design of a product verification framework that integrated Bigfoot's hardware devices, mobile applications running on target modile phones, cloud services, and simulated user's physiology. The system was linearly scalable by adding "test rigs" of hardware and mobile phones that would connect to a central test coordination server and self-configure in order to process tests in parallel that are part of a test suite. The test rigs would download the necessary versions of software in order to execute tests, run the tests, then report test results back to the test coordination service. The test coordination service would then generate a report of the test results and trace them to the requirements that were being verified. This system allowed the engineering team to rapidly verify code changes that were part of a pull request even prior to code review. This allowed the team to catch bugs early and fix them before they were merged into the main branch, where they could affect other developers.

* Alex left Bigfoot Biomedical to join a startup as VP of Engineering, building a Quality Management System (QMS) for "Software as a Medical Device" (SaaMD) systems. Unfortunately, they were unable to secure funding and the role was eliminated. 

Rocket Lawyer
=============
Alex joined Rocket Lawyer as Director of Engineering, leading their engineering teams in North America and Mexico. His role was effectively "Head of Engineering" and at times he reported to the CEO where there was no CTO in place. 
   * Alex built engineering organization back up to over 30 engineers and fostered a high-performing agile engineering culture similar to what he had developed at Bigfoot Biomedical. Alex carried over many of the useful aspects of his FDA-compliant engineering processes. Alex collaborated with the lead engineers to document Rocket Lawyer's multiple software systems, and put process in place to continue to maintain the documentation and enable design review of their new high level system designs. Alex's engineering practices created a higher level of collaboration amongst engineers, and allowed teams to understand, reuse, and integrate with systems and architectures from other teams. This system documentation provided was used to raise investment capital by providing technical documentation for the due-dilligence activities. 
   * At Rocket Lawyer, Alex developed a technical strategy and execution plan to merge and migrate 3 disperate systems running in the US, UK, and EU into one global system platform. The strategy allowed for the gradual migration of live customers, and the immediate conversion of new customers to the target systems while minimizing disruption to Rocket Lawyer's most valuable customers. The main challenges were to migrate legal document templates across systems, and to migrate customer data. Alex collaborated with product management and the business to make a hard decision to go forward with a reduced set of legal documents that were supported on the new system. New customers would have access to the smaller set of documents. 
   * Alex conducted a survey with every engineer to understand where improvements to engineering tools and practices could maximize productivity. By asking engineers to quantify how they were spending time on activities other than product development, Alex determined that the most impact could be gained by building a CI/CD pipeline, and streamlining the production release management process. Alex's Plaform Team worked with DevOps to build a comprehensive CI/CD framework based on Kubernetes, Helm, and Docker deployed in Google Cloud Platform (GPC). Alex empowered the team to determine the needs and goals of the CI/CD system and design a system to meet them all. This included the consistent generation and deployment of all environemnts from indivdual and shared development environments, demo environments, QA, staging, and production environments. This was achieved using a configuraion-as-code paradigm, where every deployment to every environment was performed consistently. Teams were able to build and deploy to production multiple times per day. Alex's teams experienced and worked around a the new set of problems of coordination, version control, and quality that arise with highly streamlined production deployments. 
   * Alex managed the QA teams at Rocket Lawyer and led the coordination of release management. He fixed the previous bottlenecks in production releases by empowering QA leads to have control over the level of complexity in a planned release. Releases of feature-based changes were packaged and planned in a daily release management scrum meeting. Alex's process unblocked the release-train that had been halted for 2 months and ultimately allowed multiple releases per week to be coordinated with high quality and high confidence. This resulted in minimized production issues and disruptions to the business and customers. 
   * At Rocket Lawyer, Alex managed the Data Engineering team, where he introduced modern Data Warehouse technologies such as Snowflake, and Apache Airflow, and Kafka. His team built an event stream using Apache Kafka and an event consumer to track discrete user experience events from both the backend systems and frontend, then computed in real-time the real user experience monitoring statistics. This APM data was used to identify user-drop-off points in our UI flows and identify where we could improve system performance and reliability. The system was also integrated with the Amplitude Customer Data Platform (CDP). 
   * Alex's Application Platform Team built APIs and services to offer white-labelled experiences to affiliate members of our client customer's organizations. 
   * Alex designed a system to facilitate affiliate clients to offer signup for their customers. In the case of the customer AARP, they wanted to offer Rocket Lawyer as a service to their 50 million members. Alex design allowed them to retrieve a "Signed URL" for each of their members to claim an account with specific privileges. Rocket Lawyer previously used the end-user's email address domain to recognize them as an employee of a client customer company in order to receive the Rocket Lawyer entitlements. Since members of organizations like AARP do not have a common email domain, Alex designed an innovative solution to to solve this problem. 
   * At Rocket Lawyer, Alex's and his teams built an "affiliate member management" system allow Rocket Lawyer customers to offer Rocket Lawyer membership services as an employee benefit to their employees. 
   * At Rocket Lawyer, Alex's Platoform Team built a configurable customer entitlement system that stored an end-user's entitlements and capabilities in the system. This allowed for multiple levels of membership and for the user-interface to understand which feature a user has access to, the value of those features, and which features to suggest they could add to their account. 
   * At Rocket Lawyer, Alex conceived of and designed a "group configuration management service" that could store hierarchical nodes of inheritable configurations. This system solved many issues related to management of configurations across the many aspects of the product. Configurations were able to be easily persisted in a centralized location, with minimal engineering effort to make them dynamically modifiable at runtime. Configurations were able to be defined for groups on nodes in the hierarchy, allowing for members of an affiliate to be given a custom experience, and for sub-groups to also inherit a default experience and apply overrides. This sytem was used to configure white-labelled experiences, entitlements, and a group's domain data and settings. This also enabled an admin user interface to see and configure all configurable data in one coherent and comprehensive data store. 
   * Alex's teams added SSO and OIDC integration for their clients end-user customers to log into Rocket Lawyer using their own company credentials. 
   * Alex's teams built a self-service API portal using APIGEE for Rocket Lawyer client customers to sign-up. The API portal needed to be integrated with Rocket Lawyer's existing identity management system and APIGEE tokens had to be exchanged for Rocket Lawyer access tokens. 
   * Alex's teams built a multi-tenant microservice framework capable of rapidly setting up tenancies for development, test cases, client sandboxes, and production environments. Tenancies share the same infrastructure and instances but keep data separate and private from other tenancies. Alex designed a set of common tenancy management APIs to allow setup and tear-down of tenancies and cleanup of tenancy data across participating micro-services. 

Finix Payments
==============
Alex's Accomplishments at Finix Payments are as follows: 
* Alex led the Frontend Team to develop a complete Payments Dashboard redesign. Alex collaborated with Product Managemetn and UX to define the customer-need-focused redesign based upon understanding the target customers and their user needs. The frontend was built using React. Alex led a backend-for-frontend team called "Finix Web Services" or FWS that built UI-facing APIs in Java on Springboot and hosted in Kubernetes from AWS. The backend services empowered the frontend team to build higher performing user experiences and provided whitelablel embeddable components for customers. 
* Alex's Finix Web Services Team built APIs to allow Customer Self-Service Signup for Sandbox accounts signup to allow prospective clients to generate sales leads for growth clients. They also build APIs and backends to allow self-service Production account upgrades which automated much of the manual support operations, regulatory, and underwriting information gathering. The self-service signup integrated with Alex's automated underwriting engine to allow for rapid onboarding of new merchants.
* Alex's Compliance Team built Sub-Merchant PCI Compliance backends and public APIs to help vertical SaaS platform customers to manage their merchant's PCI compliance. Alex's team built a set of white-labeled hosted forms to allow merchants to invite their sub-merchants to attest to PCI regulations via a secure URL. Alex's team built a management console to allow merchants to track the compliance of their sub-merchants.
* Alex's Finix Web Services Team built Sub-Merchant Self Signup Embeddable Forms to allow sub-merchants of Finix Customers (SaaS Clients) to rapidly and automatically onboard new sub-merchants to their platforms. Alex's team built a secure unique link distribution mechanism to allow Merchants to invite Sub-Merchants to sign-up. The signup link involved collecting 10+ pages of information and allowed the Sub-Merchant to revisit the link without the need for an account, gathering the data before submitting to the automated underwriting engine. Alex's team built a sub-merchant signup integration API for the Merchant. Alex's team built a monitoring dashboard for the Merchant to track their sub-merchant signup activities. This reduced the time-to-processing for payments on the Finix platform from multiple days to under 30 minutes.
* Alex's Underwriting Team built a new Automated Underwriting Engine in order to break away from the monolithic architecture and use DDD principles to speed up development and integration of many 3rd party verification services. The new underwriting engine was built using a Domain Driven Design (DDD) approach and was configurable at runtime. The engine was able to make an underwriting decision for a merchant within 30 seconds. Alex designed the configuration of the automated underwriting engine so that an MVP could be rapidly built and released, with the ability to add more complex underwriting rules and verification services later. The configuration was hierarchically parameterized using risk and financial tollerances so as to be configurable by A.I. or machine learning algorithms. The engine was designed to be configurable at runtime, allowing for rapid changes to the underwriting rules and verification services used. The engine was designed to be hierarchical, allowing for a global configuration to be inherited by a merchant's industry, which could be overridden by a merchant's specific configuration. This allowed for a merchant to be provisioned with sensible defaults, and for the merchant to be able to override the defaults if necessary. The engine was designed to be parameterized, allowing for the configuration to be implicit but from more explicit configurations to be added as necessary. 
* Alex sponsored and led the development of a hosted configuration platform service. Alex brought his learnings from prior projects involving configuration and hosted shared multi-tenant services to lead his team to build a centralized configuration service to solve the many dynamic and inherited configuration needs of the Finix platform and it's customers. These configuration needs lncluded the ability to inherit sensible defaults from a global settings, or from a custom setting for a specific industry, or from a company's specific configuration that was inherited from the above. These settings all needed to be dynamically configurable at runtime. Settings could apply to underwriting rules and risk management, payment settlements configurations, white-labeled branding, payments processing configurations, and many other aspects of the Finix platform. The hosted Configuration Service provided an internal API to allow software systems to define any number of “configuration bundles” categories and their properties, and assign then to nodes in a hierarchical tree. The nodes are generally organized to correspond to the hierarchy of the Finix platform’s customers, the organizations thay belong to, and the industries they operate in. For a specific node in the tree, the Configuration Service computes the property values of a Config Bundle that can either inherit or override properties from a same-category-named bundle of its node's parent nodes. The hosted Configuration Service allows for complex sets of configurations to be centralized, reused, and updated at runtime. The hosted Configuration Service was built to be multi-tenant, allowing for rapid use by different development environments or different applications without the need for those invironments to host their own configuration service. Alex had used multi-tenant hosted platform services at other companies to solve the common issue of a developer needing to set up a comprehensive environment of all services in order to do their development work. Alex's hosted Configuration Service allowed for a developer to quickly set up a development environment with a minimal set of services and still be able to configure them to behave as if they were part of a larger system. This allowed for rapid development and testing of new features and services. Another advantage the Hosted Configuration Service offered was the simplicity provided for a developer to persist a configuration for their application code. Storing the configuration in the service required minimal developer effort and discouraged them from hard-coding or inventing their own non-dynamic configuration system. This provided a great boost to developer productivity. 

Data Warehouse and ETL Platform Improvements at Finix Payments
==============================================================
Alex's Data Engineering Team optimized the Data Engineering Pipeline and ETL framework to make Processing and Report Generation Performance Improvements. The team optimized the ETL and Data Warehousing design in order to increase successful report generation to 99.9% success rate. They reduced report latency from 45 minutes to under 3 minutes. Alex empowered the team to research alternative approaches to solveing the performance issues. Alex suggested processing data in successive batches based upon elapsed time since the data entered the system, with the premise that older data changes less frequently than newer data. This idea was derived from how Java performs garbage collection. The team successfully implemented this approach using "materialized views" in AWS Redshift. Alex negotiated bandwidth with the business and sponsored the team to build a QA environment with test data that was representative of the production data. This allowed the team to test their changes and verify the performance improvements. Alex prioritized teamwork to resolve ETL issues and make batch processing failures recoverable in order to improve production quality metrics. 

Engineering Process Management and SOC-2 Compliance at Finix Payments
=====================================================================
At Finix Payments, Alex spearheaded Engineering Process Management to improve the engineering team's productivity and quality. Alex defined the engineering organizations development process to be SOC-2 Compliant. Alex worked with Finix's Compliance Officer to analyze SOC-2 compliance regulations. Alex analyzed current engineering practices and worked with lead engineers to understand their needs in order to make minimal changes to the process they wanted in order for it to be compliant. Alex determined that 95% of engineering practices were acceptable and documented a 'requirements traceability' matrix to illustrate how each compliance requirements was being met by the proposed working practices. Alex created developer-oriented documentation of the engineering process in order to be customer centric and simplify the practices to be followed by the developers. Alex made this documentation part of the standard developer onboarding training. The updated development process was designed to minimize impact on the current working practices and still be SOC-2 compliant. 
   
Release Management Process and Practices at Finix Payments
==========================================================
At Finix Payments, Alex led and defined the Release Management process and practices. Alex worked with the quality engineers, business stakeholders, and engineers to define a release process that would allow the quality team to manage risk by controlling the complexity of each release. Source changes needed to be grouped into functional branches so their release schedule could be controlled, verified, and released according to the business timeline priorities. Alex used his learnings from prior companies to move the release process towards a release-when-ready vs a cadence of releasing uncoordinated changes that were committed. 

Project Estimation and Delivery Tracking at Finix Payments
==========================================================
At Finix Payments, Alex championed Project Estimation and Project Delivery Tracking. Alex built multiple spreadsheets to help his teams estimate and project their velocity and capacity for delivery over an extended timeframe (3-9 months). The spreadsheets projected the assignment allocation of each engineer to each project deliverable. It even allowed for team-members that were yet to be hired to be factored into the estimation. It allowed for engineers to have different performance capabilities to simulate ramp-up time, partial allocation, PTO, or differentiate junior engineers capabilities from high-performers. This spreadsheet tool allowed us to identify and break up large projects down to more feasible deadlines. It clearly illustrated the capacity and allocation of the team and allowed for rapid macro planning. This enabled mission-critical MVP projects to be delivered predictably. One example of this was the large overhaul of the Payments Dashboard. The project was estimated to take 7 months, but the business needed it in 3 months. Alex used the spreadsheet to identify the critical path and the team was able to deliver the MVP in 3 months. The team then continued to deliver the remaining features over the next 4 months. This gave team-members a voice and reasonable plan to deliver to. Alex projected project burn-down charts on TV’s, which gamified the delivery of projects and boosted the team's morale, motivation, and commitment to delivery. 

People Management at Finix Payments
===================================
At Finix Payments, Alex managed several teams who's total headcount was over 30 engineers prior to layoffs. Alex coached 4 lead engineers to become managers. Alex clearly defined and documented the roles for "Engineering Manager", "Lead Engineer", and "Tech Lead" so that the engineers could understand their career path and expectations for each role. Alex refined the company's Performance Evaluation and Promotion Rubric. He refined and defined the Engineering rubric for levels IC1 - IC6. Alex walked his teams through the promotion and leveling rubric and referred to it regularly for coaching in 1:1 meetings, promotions, and comp adjustment. Alex built a spreadsheet to track IC levels across the eng-org’s teams and used it for performance calibration across multiple engineering director's orgs. Finix used the spreadsheet to negotiate comp adjustments, balance the talent across the engineering org, and to retain the best performers. Alex built a spreadsheet to gauge each engineer's performance against 20+ traits, allowing a profile of each team-member to be easily maintained and visualized. This helped quantify and personalize the areas for improvement of each team-member and gave an overall perspective of the balance of traits across each engineering team. 
