Alex’s Elevator Pitchup 
Summary Label
* I am an experienced leader, with a track record for building and empowering high-performing software teams to deliver innovative production software. 
Background
* I have 10+ years in engineering management, preceded by 15+ years of hands-on software engineering across a broad range of business domains including Fintech, Banking, Legal Tech, Healthcare, using Virtual Reality, A.I., Cloud Computing, and IoT. I’ve designed and built Web, Mobile, Backend, and Firmware systems for B2C and B2B products and services. 
* I am passionate about engineering excellence and have transformed agile engineering processes and cultures at multiple companies so as to deliver the right products at a high pace and high quality. 
Current Situation
* Over the past 4 years I have reported directly to the CEO and/or CTO, managing multiple engineering teams. I’ve evolved my engineering organization to put managers in place over my teams by either hiring high caliber candidates, or coaching and promoting internal engineers. 

I Am Looking For another opportunity to grow and lead an engineering organization that will deliver innovative products in the A.I. domain. 


How Can I Help?
How can I Relate to the audience?


Alex Worden's Career Summary
* I have spent the past 8 years managing engineering teams and building up engineering organizations to deliver on company objectives and strategies. 
* Prior to that, I had a long career as software engineer at both startups and established companies and have witnessed the changes of growth in between. 
* I’ve worked on and led teams that use different methodologies and working styles. I’ve seen what works and when it doesn’t. 
* I started my career in the UK at a Virtual Reality startup. I developed an interactive world-simulation engine and an immersive user interface developer library and set of immersive applications that allowed the user to edit the virtual environment. 
* I moved to the SF Bay Area with that company as a customer facing engineer building customer integrations for NASA, General Motors, GE, Bechtel, Boeing, McDonnel Douglas, Dana, and Harley Davidson. I built a Java API to allow out customer systems to integrate with the VR system. 
* I joined a startup called WebLogic on the Servlet Engine team. 
   * I became the tech-lead for the customer-centric-engineering team with ~12 other developers building custom extensions and capabilities. I spent multiple years helping 100’s of customers scale their systems and making improvements to the WebLogic Server. 
   * I worked at WebLogic / BEA for 6 years. 
* I then joined a small team at Wells Fargo to completely re-implement their online banking system in WebLogic. I worked at Wells Fargo as a contractor and later a full time employee for 6 years. 
   * This interfaced with multiple remote backend secure banking systems, which gave me an early exposure to SOA / DDD system design before it was a recognised industry practice. I optimized sign-on experience from 12+ seconds to under 2 by performing multiple backend service calls in parallel. 
   * I designed and developed a splash-page marketing framework configurable at runtime to deliver personalized offers to customers that generated $20MM in the first 60 days of release. 
   * I developed the first Wells Fargo mobile app, as an embedded customized web-view. 
   * I designed and developed a framework to financially optimize sending SMS messages to customers. 
* I worked at Verizon Wireless as a Senior Engineer where I developed a Business Process Management (BPM) system to allow Verison to coordinate the installation of 5G wireless antenna's across the USA. I developed a no-code/low-code user interface framework to allow web forms to be defined and data collected. The forms could also be converted to interactive PDFs and printed. The framework was object-oriented using a hierarchy of widgets and layout containers that could be interpreted so the desired format of a web-form or a PDF-form. I also optimized the Database queries to be 10x faster by looking at SQL query plans. I also refactored and improved the software architecture to be more maintainable by breaking it up into domain-oriented modules. 
* I worked at Google in San Francisco on the "Vault" leagal docs team where I refactored and improved the system design that used Google Web Toolkit (GWT) to provision the web interface. I developed a system integration design plan to incorporate a legacy email system into the legal search for Google Apps for Work Gmail. The challenge was to search across combined and overlapping emails from two disperate sources of entire corporate email contexts. 

* I worked at General Electric (GE) in their Software Center of Excellence in San Ramon. I accomplished the following: 
   * I was one of the first engineers hired and defined the hiring and interview process to build the engineering organization from 20 to over 800 high caliber engineers in 9 months. I was promoted to Principal Architect over 20+ projects building IoT big data Asset Performance Monitoring (APM) projects for GE's buisiness verticals. I collaborated with executives from each of GE's verticals to determine how "big data" and IoT could be utilized to improve their business operations. The term "Industrial Internet" was coined at GE. I then oversaw the architectural design and implementation of 10+ projects. 
   * I led multiple "tiger teams" to develop proof-of-concept projects. 
   * I built a "Service Broker Framework" similar to Cloud Foundry to allow teams to host and share their SaaS analytics services with other teams at GE. 
   * I developed a cloud-native system on AWS to manage and coordinate a network of electric vehicle (EV) charging stations. It allowed GE's EV chargers to share their location and availability, then allow drivers to see which charging stations were abailable, reserve them, monitor and control them and plan their route. I collaborated with the firmware engineers and introduced the use of Google Protobuf to define the protocol between the firmware and the software systems. We build mobile apps and webapps to provide access for multiple categories of end-users including drivers, administrators, charger owners, and maintenance engineers. 
   * I developed a configuration and monitoring system to model deep-sea blowout preventors (BOP). My design utilized XML to model the configuration of the BOPs so that existing XML editors could be used - a scrappy but effective strategy that enabled the project to be built very rapidly. Once the BOP configuration was defined, the software system could keep track on key metrics and facilitate tracking which components were used and which needed to be replaced or maintained. This increased safety and reduced the deployment time for a maintenance ship from days to hours. These ships cost $500K per day so the savings per year across a fleet of ships were very significant. 
   * I designed and developed a software system to track the maintenance and use of GE's jet engines over their lifetime. It gathered usage data from each engine and predicted the lifespan of limited-life parts in each engine, which can ~7000 parts. The system ran Montecarlo simulations to determine the service intervals needed for each engine and which parts were likely to fail. This allowed GE to determine which parts should 


* I joined Bigfoot Biomedical as Director of Engineering and was promoted to Senior Director of Engineering after 3 years. 
   * I was head-hunted by a Senior Director called Alan Schachtely from GE to join "Bigfoot Biomedical", he asked me to join him to establish the engineering organization. 
   * I built the engineering team up over 4 yrars to 5 teams and over 40 people. Some of the best engineers from GE followed me to Bigfoot Biomedical. 
   * At Bigfoot Biomedical, my teams and I built two commercial products for type-1 and type-2 diabetes. The product were classified as class-3 and class-2 medical devices. We starting from a clean slate, and we were able to rapidly design a cloud-native system on Amazon Web Services (AWS) that included a React Native mobile app on iOS and Android that communicated to hardware using Google Protobuf. The mobile app connected to our cloud services, which allowed family member and/or physicians to monitor the health of the person with diabetes on both a webapp (built using React / Typescript) and another version of the React mobile app for monitoring. The cloud services were built to be multi-tenant from the start and used Java, Spring Boot, Postgre DB, AWS Dynamo DB, Kenisis, and Kafka. It was a domain-driven-design (DDD) from the outset, which allowed us to rapidly build and scale the system without any overhead and scalability issues of a typical monolith that startups build. 
   * The system was built to be compliant with IEC62304 standards. My team and I developed a light-weight agile working methodology that delivered everything necessary to meet FDA standards but also move fast and innovate. I have continued to evolve these working practices over the rest of my career, where I have shown a track-record for transforming engineering teams and cultures to have predictable high performance and empower engineers to grow and deliver their best work. 
   * I owned to company-wide configuration of codeBeamer to allow Product Management and Engineering to accomplish "requirements traceability". The configuration allowed the definition of "user needs" and "business goals", tracing to specific "product requirements". It supported "hazard analysis" and definition of mitigation requirements. The engineering team worked from high-level system designs that traced to product requirements and implementation stories that built and traced to high-level system designs. 
   * I developed an efficient system based upon an extension of Junit that could document our verification tests and auto-generate verification test reports that traced to requirements in order to meet FDA and IEC62304 standards. 
   * I mentored and grew two lead engineers into engineering managers, who ran two of my teams. 
   * I led a strategy to build multi-tenant systems based on my learnings from GE, which allowed the teams to share the use of hosted services during development and testing. This greatly simplified and accellerated development and testing of our distributed systems. 

* I left Bigfoot Biomedical to join a startup as VP of Engineering, building a Quality Management System (QMS) for "Software as a Medical Device" (SaaMD) systems. Unfortunately, they were unable to secure funding and the role was eliminated. 

* I joined Rocket Lawyer as Director of Engineering, managing their engineering teams in North America and Mexico. 
   * At Rocket Lawyer, I built the teams back up to over 30 engineers and fostered a high-performing agile engineering culture similar to what I had developed at Bigfoot Biomedical. I carried over many of the useful aspects of engineering processes. I collaborated with the lead engineers to document Rocket Lawyer's multiple software systems, and put process in place to continue the documentation and review of their high-level-system-designs. This created a higher level of collaboration amongst engineers, allowed teams to understand, reuse, and integrate with systems and architectures from other teams, and ultimately provided context for the CEO to raise investment capital by providing comprehensive documentation for the due-dilligence. 
   * At Rocket Lawyer, I developed a technical strategy and execution plan to migrate from 3 disperate systems running in the US, UK, and EU into one global system. The strategy allowed for the gradual migration of live customers, and the immediate conversion of new customers to the target systems whihle minimizing disruption to Rocket Lawyer's most valuable customers. The main challenges were to migrate legal document templates across systems, and to migrate customer data. I developed a strategy to migrate the templates and data in a way that minimized the disruption to the business and to the customers. We made a hard decision to go forward with a reduced set of legal documents that were supported on the new system. New customers would have access to the smaller set of documents. 
   * At Rocket Lawyer, I conducted an survey with every engineer to understand where improvements to engineering tools and practices could maximize productivity. I determined that the most impace could be gained by building a CI/CD pipeline, and streamlining the production release management process. My plaform team worked with the DevOps team to build a comprehensive CI/CD framework based on Kubernetes, Helm, and Docker deployed in Google Cloud Platform (GPC). We determined the needs and goals of the system and were able to meet them all, including the consistent generation and deployment of every environemnts from development through shared, demo, QA, staging, and production through configuraion-as-code, where every deployment was managed by the same configuration. Teams were able to build and deploy to production multiple times per day. We experienced the new set of problems of coordination, version control, and quality that arise with a highly streamlines path to production deployment. 
   * At Rocket Lawyer, I managed the QA teams at Rocket Lawyer and led the coordination of release management. I fixed the previous bottlenecks in production releases by empowering QA leads to have control over the level of complexity in a planned release. Releases of feature-based changes were packaged and planned in a daily release management meeting. My process unblocked the release-train that had been halted for multiple months and allowed multiple releases per week to be coordinated with high quality and high confidence. This minimized production issues and disruptions to the business and our customers. 
   * At Rocket Lawyer, I managed the Data Engineering team, where I introduced modern Data Warehouse technologies such as Snowflake, and Apache Airflow, and Kafka. We built an event stream using Apache Kafka and an event consumer to track discrete user experience events from both the backend systems and frontend, then computed in real-time the real user experience monitoring statistics. This APM data was used to identify user-drop-off points in our UI flows and identify where we could improve system performance and reliability. We also integrated with the Amplitude Customer Data Platform. 
   * At Rocket Lawyer, My application platform team built APIs and services to offer white-labelled experiences to affiliate members of our client customer's organizations. 
   * At Rocket Lawyer, I designed a system to facilitate affiliate clients to offer signup for their customers. In the case of AARP, they wanted to offer Rocket Lawyer as a service to their 50 million members. My design allowed them to retrieve a "Signed URL" for each of their members to claim an account with specific privileges. Rocket Lawyer previously used the end-user's email address domain to recognize them as an employee of a client company in order to receive the Rocket Lawyer entitlements. My design allowed for a more flexible and secure system that allowed the client to control the user experience and the entitlements. Members of organizations like AARP do not have a common email domain, so it required an innovative solution. 
   * At Rocket Lawyer, My teams and I built an "affiliate member management" system to allow Rocket Lawyer to offer their services as an employee benefit to our client's employees. 
   * At Rocket Lawyer, My platoform team build a configurable customer entitlement system that stored an end-user's entitlements and capabilities in the system. This allowed for multiple levels of membership and for the user-interface to understand which feature a user has access to, the value of those features, and which features to suggest they could add to their account. 
   * At Rocket Lawyer, I conceived of and designed a "group configuration management service" that could store hierarchical nodes of inheritable configurations. This system solved many issues related to management of configurations across the many aspects of the product. Configurations were able to be stored in one place, with minimal engineering effort to make them dynamically modifiable at runtime. Configurations were able to be defined for groups on nodes in the hierarchy, allowing for members of an affiliate to be given a custom experience, and for sub-groups to also inherity a default experience and apply overrides. This sytem was used to configure white-labelled experiences, entitlements, and a group's domain data and settings. This also enabled an admin user interface to see and configure all configurable data in one coherent and comprehensive data store. 
   * My teams build a project to allow France-Defi to experience a white-labelled and co-branded user interface. Added SSO and OIDC integration for their agents and customer to log into Rocket Lawyer. 
   * My teams built a self-service API portal using APIGEE for Rocket Lawyer client customers to sign-up. The API portal needed to be integrated with Rocket Lawyer's existing identity management system and APIGEE tokens has to be exchanged for Rocket Lawyer access tokens. 
   * My teams built a multi-tenant microservice framework capable of rapidly setting up tenancies for development, test cases, client sandboxes, and production environments. Tenancies share the same infrastructure and instances but keep data separate and private from other tenancies. I designed a set of common tenancy management APIs to allow setup and tear-down of tenancies and cleanup of tenancy data across participating micro-services. 


Leading Innovative Teams vs Specific Technology Experience: 

* I have experience in building systems that leverage AI techniques for the development and maintenance of proprietary data models. 

* I have a lot of experience leading teams to deliver innovative solutions. Some of which have involved aspects of A.I. but I have learned that what is more important is creating an environment that hires the brightest and most innovative candidates, defining a product development process that identifies the objectives of the target customers and the business, then giving the engineers the support to be creative and maximize the probability of delivering successful solutions.

* I have a track record of solving complex problems and delivering value through innovative strategy and software design. 
